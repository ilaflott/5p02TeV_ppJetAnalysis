//these are "proper" SMP bins based on 
////1) the upper limit of the statistics of the data (but NOT the statistics-per-bin), 
////2) the reach of our JER smearing fit according to PY8
////3) the range inwhich joao generated the fastNLO #'s.



//default pt bin edges, chosen such that pt goes as high as possible as long as 
//1; there's SOME statistics and 2; plays well with smeared NLO pT range
std::vector<std::vector<double>> default_SMP_ptbins{
  {//00eta05
    56.,      
    64.,       74.,       84.,       97.,       114.,
      133.,      153.,      174.,      196.,      
      220.,     
      245.,
      272.,  
      300., 
      330.,   
      362.,
      395.,    
      430.,   
      468.,      
      507.,  
      548.,
      592.,
      638., 
      686.,
      737.,
      790.,  
      846.,
      905.,
      967.,//last entry in data spectra
      1032.},


  {//05eta10
    56.,      
    64.,       74.,       84.,       97.,       114.,
      133.,      153.,      174.,      196.,      
      220.,     
      245.,
      272.,  
      300., 
      330.,   
      362.,
      395.,    
      430.,   
      468.,      
      507.,  
      548.,
      592.,
      638., 
      686.,
      737.,
      790.,  
      846.,//WARNING, empty bin in data here
      905.,//last entry in data spectra
      967.},



  {//10eta15
    56.,      
    64.,       74.,       84.,       97.,       114.,
      133.,      153.,      174.,      196.,      
      220.,     
      245.,
      272.,  
      300., 
      330.,   
      362.,
      395.,    
      430.,   
      468.,      
      507.,  
      548.,
      592.,
      638., 
      686.,//last entry in data spectra
      737.},


  {//15eta20
    56.,      
    64.,       74.,       84.,       97.,       114.,
      133.,      153.,      174.,      196.,      
      220.,     
      245.,
      272.,  
      300., 
      330.,   
      362.,
      395.,    
      430.,   
      468.,      
      507.,  
      548.,
      592.,//WARNING, empty bin in data here
      638., //limit of NLO smearing for this bin
      686.}//,//last entry in data spectra
    //737.}
};


//default pt bin edges, chosen such that pt goes as high as possible as long as
// 1; there's SOME statistics and 2; plays well with smeared NLO pT range and 3; no empty bins in data spectra
std::vector<std::vector<double>> default2_SMP_ptbins{
  {//00eta05
    56.,      
    64.,       74.,       84.,       97.,       114.,
      133.,      153.,      174.,      196.,      
      220.,     
      245.,
      272.,  
      300., 
      330.,   
      362.,
      395.,    
      430.,   
      468.,      
      507.,  
      548.,
      592.,
      638., 
      686.,
      737.,
      790.,  
      846.,
      905.,
      967.,//last entry in data spectra
      1032.},


  {//05eta10
    56.,      
    64.,       74.,       84.,       97.,       114.,
      133.,      153.,      174.,      196.,      
      220.,     
      245.,
      272.,  
      300., 
      330.,   
      362.,
      395.,    
      430.,   
      468.,      
      507.,  
      548.,
      592.,
      638., 
      686.,
      737.,
      790.,  
      846.},//WARNING, empty bin in data here
    //905.,//last entry in data spectra
    //967.},



  {//10eta15
    56.,      
    64.,       74.,       84.,       97.,       114.,
      133.,      153.,      174.,      196.,      
      220.,     
      245.,
      272.,  
      300., 
      330.,   
      362.,
      395.,    
      430.,   
      468.,      
      507.,  
      548.,
      592.,
      638., 
      686.,//last entry in data spectra
      737.},


  {//15eta20
    56.,      
    64.,       74.,       84.,       97.,       114.,
      133.,      153.,      174.,      196.,      
      220.,     
      245.,
      272.,  
      300., 
      330.,   
      362.,
      395.,    
      430.,   
      468.,      
      507.,  
      548.,
      592.}//,//WARNING, empty bin in data here
      //638., //limit of NLO smearing for this bin
      //686.}//,//last entry in data spectra
      //737.}
};


std::vector<std::vector<double>> merged_SMP_ptbins{
  {//00eta05

    ////if i'm allowed to omit some bins at high pt, then i like this one, because it works for 05y10 as well as this one.
    //    43., 49., 
      56.,      
    64.,       74.,       84.,       97.,       114.,
    133.,      153.,      174.,      196.,      
      220.,      
      245.,
      272.,      
      300.,      
      330.,            
      //362.,   
      395.,    
      //430.,   
      //468.,      
      507.,   
      //548.,            
      //592.,     
      638.,    
      //686.,     
      //737.,     
      // 790.,
      846.},           
    //905.,      
    //967.//,      
    //1032. ,
    //1101.},

//    //what i get if i keep all bins w/ statistics and don't care about how it plays with other y bins
//    //con: don't like the way the boundaries contrast w/ 05y10
//    //con: plus the statistics in the last two bins are tricky
//    56.,      
//    64.,       74.,       84.,       97.,       114.,
//    133.,      153.,      174.,      196.,      
//      220.,     
//      245.,
//      272.,  
//      300., 
//      330.,   
//      362.,
//      //395.,    
//      430.,   
//      //468.,      
//      507.,  
//      //548.,
//      //592.,
//      638., 
//      //686.,
//      //737.,
//      790.,  
//      //846.,
//      //905.},
//      //967.},
//      1032.},

//    //another possibility what i get if i omit some bins w/ crappy statistics and don't care about how it plays with other y bins
////    //con: don't like the way the boundaries contrast w/ 05y10
////    //con: plus the statistics in the last two bins are tricky
//    56.,      
//    64.,       74.,       84.,       97.,       114.,
//    133.,      153.,      174.,      196.,      
//      220.,     
//      245.,
//      272.,  
//      300., 
//      330.,   
//      362.,
//      //395.,    
//      430.,   
//      //468.,      
//      507.,  
//      //548.,
//      592.,
//      //638., 
//      //686.,
//      737.,
//      //790.,  
//      //846.,
//      905.},
//    //967.},//last entry in data spectra
//    //1032.},





  {//05eta10



    //if i'm allowed to omit some bins at high pt, and i care about preserving the bin edges used in 00y05, this is what i get
    //43., 49., 
    56.,      
    64.,       74.,       84.,       97.,       114.,
    133.,      153.,      174.,      196.,      
      220.,      
      245.,
      272.,      
      300.,      
      330.,            
      //362.,   
      395.,   
      //430.,   
      //468.,      
      507.,   
      //548.,            
      //592.,     
      638.,    
      //686.,     
      //737.,     
      // 790.,
      846.}, //WARNING empty bin in data 846. - 905.      
      //905.,  //last entry in data spectra
    //967.  },
    






  {//10eta15
  
//    56.,      
//    64.,       74.,       84.,       97.,       114.,
//    133.,      153.,      174.,      196.,      
//      220.,      
//      245.,
//      272.,      
//      300.,     
//      330.,     
//      362.,     
//      395.,      
//      430.,
//      468.,      
//      507.,     
//      548., 
//      592.,
//      638.,
//      686.,  
//      737.},
    //,      790.,
    //846.}, 
//this is what i arrive at if i restrict myself to using bin edges present in 00y05 and 05y10
    //43., 49., 
    56.,      
    64.,       74.,       84.,       97.,       114.,
    133.,      153.,      174.,      196.,      
      220.,      
      245.,
      272.,      
      //300.,     
      330.,     
      //362.,     
      395.,      
      //430.,
      //468.,      
      507.,     
      //548., 
      //592.,
      638.},//,//last entry in data spectra      
      //686.,     
      //737.,     
      //790.,


  {//15eta20
    //43.,       49.,       
    //43., 49., 
    56.,      
    64.,       74.,       84.,       97.,       114.,
    133.,      153.,      174.,      196.,      220.,      245.,
      272., 
      //300.,   
      330.,     
      //362.,      
      395.,  
      //430.,
      //468.,      
      507.}//,      
      //548.,      
      //592.}//empty, bin in data here     
      //638.}//limit of NLO smearing      
      //686.}//last entry in data spectra
//  {//15eta20 JOHNS SUGGESTIION
//    //43.,       49.,       
//    //43., 49., 
//    56.,      
//    64.,       74.,       84.,       97.,       114.,
//    133.,      153.,      174.,      196.,      220.,      245.,
//      272., 
//      300.,   
//      //330.,     
//      362.,      
//      //395.,  
//      430.,
//      //468.,      
//      //507.}//,      
//      //548.,      
//      592.}//empty, bin in data here     
//      //638.}//limit of NLO smearing      
//      //686.}//last entry in data spectra

  //  {//20eta25
  //    43.,       49.,       56.,      
  //    64.,       74.,       84.,       97.,       114.,
  //    133.,      153.,      174.,      196.,      220.,      245.,
  //    272.,      300.,      330.,      362.,      395.,      430.,
  //    468.,      507.,      548.,      592.,      638.,      686.}
  
  
};












//// DONT DELETE: SAVING JUST IN CASE OF MASSACRE WHILE TRYING OUT NEW BINNING ABOVE (written 5/13/2020)
////these are "proper" SMP bins based on 
//////1) the upper limit of the statistics of the data (but NOT the statistics-per-bin), 
//////2) the reach of our JER smearing fit according to PY8
//////3) the range inwhich joao generated the fastNLO #'s.
//std::vector<std::vector<double>> SMP_ptbins{
//  {//00eta05
//    //43.,       49.,       
//    56.,      
//    64.,       74.,       84.,       97.,       114.,
//    133.,      153.,      174.,      196.,      220.,      245.,
//    272.,      300.,      330.,      362.,      395.,      430.,
//    468.,      507.,      548.,      592.,      638.,      686.,
//    737.,      790.,      846.,      905.,      967.,      1032.},//, 1101.}, 
//  {//05eta10
//    //43.,       49.,       
//    56.,      
//    64.,       74.,       84.,       97.,       114.,
//    133.,      153.,      174.,      196.,      220.,      245.,
//    272.,      300.,      330.,      362.,      395.,      430.,
//    468.,      507.,      548.,      592.,      638.,      686.,  
//    737.,      790.,      846.,      905.,      967.},//,      1032.}, 
//  {//10eta15
//    //43.,       49.,       
//    56.,      
//    64.,       74.,       84.,       97.,       114.,
//    133.,      153.,      174.,      196.,      220.,      245.,
//    272.,      300.,      330.,      362.,      395.,      430.,
//    468.,      507.,      548.,      592.,      638.,      686.,  
//    737.},//,      790.}, 
//  {//15eta20
//    //43.,       49.,       
//    56.,      
//    64.,       74.,       84.,       97.,       114.,
//    133.,      153.,      174.,      196.,      220.,      245.,
//    272.,      300.,      330.,      362.,      395.,      430.,
//    468.,      507.,      548.,      592.}//,      638.,      686.,  
//  //737.,      790.}//,
//  //  {//20eta25
//  //    43.,       49.,       56.,      
//  //    64.,       74.,       84.,       97.,       114.,
//  //    133.,      153.,      174.,      196.,      220.,      245.,
//  //    272.,      300.,      330.,      362.,      395.,      430.,
//  //    468.,      507.,      548.,      592.,      638.,      686.}
//  
//  
//};



////these are "proper" SMP bins up to 967 GeV (where we start to lose statistics). minimum of 56 GeV imposed just like NLO files (and likely where HLT40 is close to 100% eff)
//std::vector<std::vector<double>> SMP_ptbins{
//  {//00eta05
//    56.,      
//    64.,      74.,      84.,      97.,      114.,
//    133.,      153.,      174.,      196.,      220.,       245.,
//    272.,      300.,      330.,      362.,      395.,       430.,
//    468.,      507.,      548.,      592.,      638.,       686.,
//    737.,      790.,      846.,      905.,      967.,      1032.}, 
//    //    1101.,     1172.,     1248.,     1327.,     1410.,     1497.},
//  {//05eta10
//    56.,      
//    64.,      74.,      84.,      97.,      114.,
//    133.,      153.,      174.,      196.,      220.,      245.,
//    272.,      300.,      330.,      362.,      395.,      430.,
//    468.,      507.,      548.,      592.,      638.,      686.,  
//    737.,      790.,      846.,      905.,      967.,      1032.}, 
//      //1101.,     1172.,     1248.,     1327.,     1410.,     1497.},
//  {//10eta15
//    56.,      
//    64.,      74.,      84.,      97.,      114.,
//    133.,      153.,      174.,      196.,      220.,      245.,
//    272.,      300.,      330.,      362.,      395.,      430.,
//    468.,      507.,      548.,      592.,      638.,      686.,  
//    737.,      790.,      846.,      905.,      967.,      1032.}, 
//    //    1101.,     1172.,     1248.,     1327.,     1410.,     1497.},
//  {//15eta20
//    56.,      
//    64.,      74.,      84.,      97.,      114.,
//    133.,      153.,      174.,      196.,      220.,      245.,
//    272.,      300.,      330.,      362.,      395.,      430.,
//    468.,      507.,      548.,      592.,      638.,      686.,  
//    737.,      790.,      846.,      905.,      967.,      1032.} 
//  //1101.,     1172.,     1248.,     1327.,     1410.,     1497.},
//};

//these are the binnings from raghav's NLO files. they impose a minimum of 56 GeV (current lower limit of data) and cut off the large high pt bin (686-1000 GeV)

std::vector<std::vector<double>> NLO_SMP_ptbins{
  {//00eta05 
    56.,      
    64.,      74.,      84.,      97.,      114.,
    133.,      153.,      174.,      196.,      220.,      245.,
    272.,      300.,      330.,      362.,      395.,      430.,
    468.,      507.,      548.,      592.,      638.,      686.  },
 {//05eta10
    56.,      
    64.,      74.,      84.,      97.,      114.,
    133.,      153.,      174.,      196.,      220.,      245.,
    272.,      300.,      330.,      362.,      395.,      430.,
    468.,      507.,      548.,      592.,      638.,      686.  },
  {//10eta15
    56.,      
    64.,      74.,      84.,      97.,      114.,
    133.,      153.,      174.,      196.,      220.,      245.,
    272.,      300.,      330.,      362.,      395.,      430.,
    468.,      507.,      548.,      592.	        },
  {//15eta20
    56.,      
    64.,      74.,      84.,      97.,      114.,
    133.,      153.,      174.,      196.,      220.,      245.,
    272.,      300.,      330.,      362.,      395.,      430.,
    468.,      507.       }
};


std::vector<std::vector<double>> john_ptbins{
  {//00eta05
    //56.,   
    64.,  84.,  114.,
      153.,  196.,  245.,  300.,
      362.,  430.,  507.,  592.,
      686.,  
      790.,  905.,  1032.
      },
    {//05eta10
      //56.,  
      64.,  84.,  114.,
	153.,  196.,  245.,  300.,
	362.,  430.,  507.,  592.,
	686.,  
	790.,  905.
	},
      {//10eta15
	//56., 
	64.,  84.,  114.,
	  153.,  196.,  245.,  300.,
	  362.,  430.,  507.,  592.,
	  686.  
	  },
	{//15eta20
	  //56., 
	  64.,  84.,  114.,
	    153.,  196.,  245.,  300.,
	    362.,  430.,  507.,  
	    592.
	    
	    }
};


std::vector<std::vector<double>>john_ptbins2{
  {64,  84, 114, 153, 196, 245, 300, 362, 430, 507, 592, 686, 790, 1032},
    {64,  84, 114, 153, 196, 245, 300, 362, 430, 507, 592, 790, 1032},
      {64,  84, 114, 153, 196, 245, 300, 362, 430, 507, 592, 737},
	{64,  84, 114, 153, 196, 245, 300, 362, 430, 686}
};







//chris binning
std::vector<std::vector<double>> chris_ptbins{
  {//00eta05    // 20.,// 30.,// 40.,// 50.,
    60.,70.,80.,90.,100.,110.,
      120.,130.,140.,150.,160.,170.,
      180.,190.,200.,210.,220.,230.,
      240.,250.,260.,270.,280.,290.,
      310.,330.,350.,370.,400.,430.,
      500.//,//1500.,
  },  
  {//05eta10    // 20.,// 30.,// 40.,// 50.,
    60.,70.,80.,90.,100.,110.,
      120.,130.,140.,150.,160.,170.,
      180.,190.,200.,210.,220.,230.,
      240.,250.,260.,270.,280.,290.,
      310.,330.,350.,370.,400.,430.,
      500.//,//1500.,
  },
  {//10eta15    // 20.,// 30.,// 40.,// 50.,
    60.,70.,80.,90.,100.,110.,
      120.,130.,140.,150.,160.,170.,
      180.,190.,200.,210.,220.,230.,
      240.,250.,260.,270.,280.,290.,
      310.,330.,350.,370.,400.,430.,
      500.//,      //1500.,
  },
  {//15eta20    // 20.,// 30.,// 40.,// 50.,
    60.,70.,80.,90.,100.,110.,
      120.,130.,140.,150.,160.,170.,
      180.,190.,200.,210.,220.,230.,
      240.,250.,260.,270.,280.,290.,
      310.,330.,350.,370.,400.,430.,
      500.//,//1500.,  
  }
};


std::vector<std::vector<double>> chris_ptbins2{
  {//00eta20
    200., 250., 300., 350., 400., 500., 620., 1000.
      }
};


//// ------ SMP SPECTRA BINS ORIGINAL ------
//// ------ DO NOT TOUCH ------
//const double anabins_pt_SMP[] = {
//  1, 5, 6, 8, 10, 12, 15, 18, 21, 24, 28, 
//  32, 37, 43, 49, 
//  56, 64, 74, 84,97, 114, 
//  133, 153, 174, 196, 220, 
//  245, 272, 300,   330, 
//  362, 395, 430, 
//  468,  507, 
//  548, 592, 638, 
//  686, 
//  737, 790, 846,  905,   967,  1032, 
//  1101, 1172, 1248, 1327, 
//  //1410, 1497, 1588, 1684, 1784, 1890, 2000,
//  //2116, 2238, 2366, 2500, 2640, 2787, 2941, 3103, 3273, 3450, 3637, 3832, 
//  //4037, 4252, 4477, 4713, 4961, 5220, 5492, 5777, 6076, 6389, 6717, 7000
//  };

